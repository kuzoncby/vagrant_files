# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
	# The most common configuration options are documented and commented below.
	# For a complete reference, please see the online documentation at
	# https://docs.vagrantup.com.
	config.vm.define "master" do |master|
		# Every Vagrant development environment requires a box. You can search for
		# boxes at https://vagrantcloud.com/search.
		master.vm.box = "centos/7"
		master.vm.hostname = "kube-master.example.com"

		# Disable automatic box update checking. If you disable this, then
		# boxes will only be checked for updates when the user runs
		# `vagrant box outdated`. This is not recommended.
		# config.vm.box_check_update = false

		# Create a forwarded port mapping which allows access to a specific port
		# within the machine from a port on the host machine. In the example below,
		# accessing "localhost:8080" will access port 80 on the guest machine.
		# NOTE: This will enable public access to the opened port
		# config.vm.network "forwarded_port", guest: 80, host: 8080

		# Create a forwarded port mapping which allows access to a specific port
		# within the machine from a port on the host machine and only allow access
		# via 127.0.0.1 to disable public access
		# config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

		# Create a private network, which allows host-only access to the machine
		# using a specific IP.
		master.vm.network "private_network", ip: "192.168.33.10"

		# Create a public network, which generally matched to bridged network.
		# Bridged networks make the machine appear as another physical device on
		# your network.
		# config.vm.network "public_network"

		# Share an additional folder to the guest VM. The first argument is
		# the path on the host to the actual folder. The second argument is
		# the path on the guest to mount the folder. And the optional third
		# argument is a set of non-required options.
		# config.vm.synced_folder "../data", "/vagrant_data"

		# Provider-specific configuration so you can fine-tune various
		# backing providers for Vagrant. These expose provider-specific options.
		# Example for VirtualBox:
		#
		master.vm.provider "virtualbox" do |vb|
			#   # Display the VirtualBox GUI when booting the machine
			#   vb.gui = true
			#
			#   # Customize the amount of memory on the VM:
			vb.cpus = "4"
			vb.memory = "8192"
			vb.name = "kube-master"
		end
		#
		# View the documentation for the provider you are using for more
		# information on available options.


	end

	config.vm.define "node1" do |node1|
		node1.vm.box = "centos/7"
		node1.vm.hostname = "kube-node-1.example.com"
		node1.vm.network "private_network", ip: "192.168.33.11"
		node1.vm.provider "virtualbox" do |vb|
			vb.cpus = "4"
			vb.memory = "4096"
			vb.name = "kube-node-1"
		end
	end

    config.vm.define "node2" do |node2|
		node2.vm.box = "centos/7"
		node2.vm.hostname = "kube-node-2.example.com"
		node2.vm.network "private_network", ip: "192.168.33.12"
		node2.vm.provider "virtualbox" do |vb|
			vb.cpus = "4"
			vb.memory = "4096"
			vb.name = "kube-node-2"
		end
	end

    config.vm.define "node3" do |node3|
		node3.vm.box = "centos/7"
		node3.vm.hostname = "kube-node-3.example.com"
		node3.vm.network "private_network", ip: "192.168.33.13"
		node3.vm.provider "virtualbox" do |vb|
			vb.cpus = "4"
			vb.memory = "4096"
			vb.name = "kube-node-3"
		end
	end

	config.vm.provision "file", source: "./kube-install.sh", destination: "kube-install.sh"


	# Enable provisioning with a shell script. Additional provisioners such as
	# Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
	# documentation for more information about their specific syntax and use.
	config.vm.provision "shell", inline: <<-SHELL
           sudo echo redhat | passwd root --stdin
		   yum update -y
		   yum install bash-completion net-tools vim -y
		   echo "192.168.33.10    kube-master.example.com" >> /etc/hosts
		   echo "192.168.33.11    kube-node-1.example.com" >> /etc/hosts
		   echo "192.168.33.12    kube-node-2.example.com" >> /etc/hosts
		   echo "192.168.33.13    kube-node-3.example.com" >> /etc/hosts
		   sudo chmod +x kube-install.sh
		   sudo ./kube-install.sh
		   sudo systemctl start cockpit
		   sudo systemctl enable cockpit
	SHELL
end
